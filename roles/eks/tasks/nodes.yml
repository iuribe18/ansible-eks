- name: Wait for EKS cluster to be active
  ansible.builtin.command: >
    aws eks describe-cluster --name "{{ cluster_name }}" --query "cluster.status" --output text
  register: cluster_state
  until: cluster_state.stdout == 'ACTIVE'
  retries: 60
  delay: 30
  delegate_to: localhost

- name: Check if EKS Node Group exists
  ansible.builtin.command:
    cmd: >
      aws eks describe-nodegroup --cluster-name "{{ cluster_name }}" --nodegroup-name "{{ node_group }}"
  delegate_to: localhost
  register: nodegroup_result
  ignore_errors: true

- name: Create EKS Node Group if it doesn't exist
  ansible.builtin.command:
    cmd: >
      aws eks create-nodegroup --cluster-name "{{ cluster_name }}" --nodegroup-name "{{ node_group }}" --scaling-config minSize=1,maxSize=2,desiredSize=1 
      --disk-size 30 --subnets subnet-00a2142aa6affae56 subnet-0377a6367d4a41ab8 subnet-0806a09f085cf733d 
      --node-role arn:aws:iam::348691576534:role/AmazonEKSNodeRole 
      --instance-types "{{ instance_type }}" --ami-type "{{ ami }}" --remote-access ec2SshKey=santander --capacity-type ON_DEMAND
  delegate_to: localhost
  when: nodegroup_result.rc != 0