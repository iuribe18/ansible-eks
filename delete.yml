---
- name: Eliminar recursos de AWS
  hosts: localhost
  tasks:
    - name: Incluir variables
      include_vars: defaults/main.yml

    - name: Verificar si el nodegroup existe
      command:
        cmd: aws eks describe-nodegroup --cluster-name "{{ cluster_name }}" --nodegroup-name "{{ node_group }}"
      register: nodegroup_check
      delegate_to: localhost
      ignore_errors: true
  
    - name: Eliminar nodos
      command:
        cmd: aws eks delete-nodegroup --cluster-name "{{ cluster_name }}" --nodegroup-name "{{ node_group }}"
      delegate_to: localhost
      when: nodegroup_check.rc == 0

    - name: Esperar a que el nodegroup sea eliminado
      command:
        cmd: aws eks wait nodegroup-deleted --cluster-name "{{ cluster_name }}" --nodegroup-name "{{ node_group }}"
      delegate_to: localhost
      retries: 10
      delay: 60
      ignore_errors: true

    - name: Eliminar un rol de IAM
      iam_role:
        name: AmazonEKS_EBS_CSI_DriverRole
        state: absent
      register: delete_role_result

    - name: Eliminar política adjunta al rol
      iam_policy:
        name: AmazonEKS_EBS_CSI_Driver_Policy
        state: absent
      register: delete_policy_result

    - name: Eliminar el stack de CloudFormation
      command: aws cloudformation delete-stack --stack-name {{ stack_name }}
      delegate_to: localhost


    - name: Eliminar el clúster de EKS
      command:
        cmd: aws eks delete-cluster --name "{{ cluster_name }}"
      delegate_to: localhost

    - name: Esperar a que el clúster sea eliminado
      command:
        cmd: aws eks wait cluster-deleted --name "{{ cluster_name }}"
      delegate_to: localhost
      retries: 10
      delay: 60
      ignore_errors: true

    - name: Obtener nombres de balanceadores de carga clásicos
      ansible.builtin.command: aws elb describe-load-balancers --query "LoadBalancerDescriptions[].LoadBalancerName" --output text
      register: classic_lb_names_result
    
    - name: Set fact with classic LB names
      set_fact:
        classic_lb_names: "{{ classic_lb_names_result.stdout_lines | map('trim') | list }}"

    - name: Eliminar balanceadores de carga clásicos
      ansible.builtin.command: >
        aws elb delete-load-balancer
        --load-balancer-name "{{ item }}"
      loop: "{{ classic_lb_names }}"

    - name: Wait for classic load balancers to be deleted
      pause: seconds=60
      when: classic_lb_names_result.stdout_lines | length > 0

    - name: Get VPC ID by Name
      command:
        cmd: aws ec2 describe-vpcs --filters "Name=tag:Name,Values={{ vpc_name }}" --query "Vpcs[0].VpcId" --output text
      register: vpc_id_result
      delegate_to: localhost

    - set_fact:
        vpc_id: "{{ vpc_id_result.stdout }}"

    - name: Eliminar la VPC
      command:
        cmd: "aws ec2 delete-vpc --vpc-id {{ vpc_id }}"
      delegate_to: localhost