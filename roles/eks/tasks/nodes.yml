- name: Wait for EKS cluster to be active
  ansible.builtin.command: >
    aws eks describe-cluster --name "{{ cluster_name }}" --query "cluster.status" --output text
  register: cluster_state
  until: cluster_state.stdout == 'ACTIVE'
  retries: 60
  delay: 30
  delegate_to: localhost

- name: Check if EKS Node Group exists
  ansible.builtin.command:
    cmd: >
      aws eks describe-nodegroup --cluster-name "{{ cluster_name }}" --nodegroup-name "{{ node_group }}"
  delegate_to: localhost
  register: nodegroup_result
  ignore_errors: true

- name: Get VPC ID by Name
  command:
    cmd: >
      aws ec2 describe-vpcs --filters "Name=tag:Name,Values={{ vpc_name }}" --query "Vpcs[0].VpcId" --output text
  register: vpc_id_result
  delegate_to: localhost

- set_fact:
    vpc_id: "{{ vpc_id_result.stdout }}"

- name: Get subnets
  command:
    cmd: >
      aws ec2 describe-subnets --filters Name=vpc-id,Values={{ vpc_id }} --query 'Subnets[*].SubnetId' --output text
  register: subnets_result
  delegate_to: localhost

- set_fact:
    subnets: "{{ subnets_result.stdout }}"

# - name: Create EKS Node Group if it doesn't exist
#   ansible.builtin.command:
#     cmd: >
#       aws eks create-nodegroup --cluster-name "{{ cluster_name }}" --nodegroup-name "{{ node_group }}" --scaling-config minSize=1,maxSize=2,desiredSize=1 
#       --disk-size 30 --subnets {{ subnets | join(' ') }}
#       --node-role arn:aws:iam::348691576534:role/AmazonEKSNodeRole 
#       --instance-types "{{ instance_type }}" --ami-type "{{ ami }}" --remote-access ec2SshKey=santander --capacity-type ON_DEMAND
#   delegate_to: localhost
#   when: nodegroup_result.rc != 0

# - name: Create EKS Node Group if it doesn't exist
#   ansible.builtin.command:
#     cmd: >
#       aws eks create-nodegroup --cluster-name "{{ cluster_name }}" --nodegroup-name "{{ node_group }}" --scaling-config minSize=1,maxSize=2,desiredSize=1 
#       --disk-size 30 --subnets "{{ subnets | join(',') }}"
#       --node-role arn:aws:iam::348691576534:role/AmazonEKSNodeRole 
#       --instance-types "{{ instance_type }}" --ami-type "{{ ami }}" --remote-access ec2SshKey=santander --capacity-type ON_DEMAND
#   delegate_to: localhost
#   when: nodegroup_result.rc != 0

# - name: Create EKS Node Group if it doesn't exist
#   ansible.builtin.command:
#     cmd: >
#       aws eks create-nodegroup --cluster-name "{{ cluster_name }}" --nodegroup-name "{{ node_group }}" --scaling-config minSize=1,maxSize=2,desiredSize=1 
#       --disk-size 30 --subnets "{{ subnets.split() | join(' ') }}"
#       --node-role arn:aws:iam::348691576534:role/AmazonEKSNodeRole 
#       --instance-types "{{ instance_type }}" --ami-type "{{ ami }}" --remote-access ec2SshKey=santander --capacity-type ON_DEMAND
#   delegate_to: localhost
#   when: nodegroup_result.rc != 0

- name: Create EKS Node Group if it doesn't exist
  ansible.builtin.command:
    cmd: >
      aws eks create-nodegroup --cluster-name "{{ cluster_name }}" --nodegroup-name "{{ node_group }}" --scaling-config minSize=1,maxSize=2,desiredSize=1 
      --disk-size 30 --subnets "{{ subnets }}"
      --node-role arn:aws:iam::348691576534:role/AmazonEKSNodeRole 
      --instance-types "{{ instance_type }}" --ami-type "{{ ami }}" --remote-access ec2SshKey=santander --capacity-type ON_DEMAND
  delegate_to: localhost
  when: nodegroup_result.rc != 0